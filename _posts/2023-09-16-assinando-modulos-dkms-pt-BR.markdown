---
layout: post
title:  "SecureBoot - Assinando m√≥dulos com DKMS"
date:   2023-09-16 15:00:00 -0300
categories: debian
lang: pt-BR
---
# Sobre o conte√∫do

Nesse post, vou mostrar como √© f√°cil assinar e carregar a chave p√∫blica para a BIOS UEFI para usar na assinatura e valida√ß√£o dos m√≥dulos durante a incializa√ß√£o.

## A m√°quina üñ•Ô∏è

Primeiro, √© importante ressaltar que essa instala√ß√£o ser√° feita em uma m√°quina com as seguintes configura√ß√µes:

- **CPU:** Ryzen 5 5600x
- **MB:** Asus TUF Gaming X570-PLUS/BR
  - *√Åudio:* ALC S1200A (ALC1200)
  - *LAN:* Realtek L8200A (RTL8111/8168/8411)
- **GPU:** RTX 3070
- **Wi-Fi/BT:** Intel Wi-Fi 6 (AX210/AX211/AX411) 160MHz
- **SO:** Debian 12 (bookworm)

**OBS:** O SecureBoot est√° habilitado na BIOS e o sistema foi instalado com recursos m√≠nimos, sem uma DE e nem utilit√°rios b√°sicos do sistema. Voc√™ pode acompanhar o outro post sobre a insta√ß√£o [aqui]({% post_url 2023-06-25-configuracao-debian %}).

## P√≥s-Instala√ß√£o

Ap√≥s ter instalado o sistema, apenas temos a tela do console para realizar login, nisso entro no usu√°rio `root` e sigo com a instal√ß√£o dos seguintes pacotes:

- [openssl](https://packages.debian.org/bookworm/openssl)
- [dkms](https://packages.debian.org/bookworm/dkms)

Com a instala√ß√£o desses dois pacotes, voc√™ pode seguir com a instala√ß√£o dos pacotes que deseja e ent√£o prosseguir.

## DKMS

O Dynamic Kernel Module System (DKMS) ou Suporte Din√¢mico de M√≥dulo de Kernel √© um framework que permite que ele recompile automaticamente todos os m√≥dulos DKMS quando uma nova vers√£o do kernel √© instalada. Isto permite manter os drivers de dispositivos fora da linha principal do kernel funcionando mesmo ap√≥s uma atualiza√ß√£o do kernel do Linux.

Ou seja, pegando um cen√°rio onde voc√™ tenha um m√≥dulo do kernel que pode n√£o ser atualizado junto com o kernel, mas ao atuaizar o kernel para uma vers√£o nova, o m√≥dulo √© reconstru√≠do para essa nova vers√£o, mantendo assim o m√≥dulo funcional com a nova vers√£o do kernel.

A p√°gina oficial do DKMS voc√™ encontra [aqui](https://github.com/dell/dkms).

Seguindo o passo a passo da instala√ß√£o na p√°gina do Github √© poss√≠vel ver a se√ß√£o sobre a assinatura dos m√≥dulos e a inicializa√ß√£o segura (SecureBoot).

De forma resumida, quando instalamos o DKMS ele n√£o possui nenhuma chave p√∫blica ou privada para realizar a assinatura dos m√≥dulos, por√©m ao realizar a primeira constru√ß√£o, ou seja, quando ele for executado pela primeira vez, ele ir√° criar uma chave p√∫blica e privada padr√£o para utiliza√ß√£o nas assinaturas.

Nesse ponto podemos customizar e criar nossas pr√≥prias chaves, mas em quest√£o de praticidade vamos utilizar as chaves padr√µes geradas por ele.

O nosso trabalho aqui ser√° registrar a chave p√∫blica em nosso sistema UEFI. E aqui entra o `shim` e o `mokutil`.

## Shim e o MOKutil

O [shim](https://packages.debian.org/bookworm/shim-signed) √© um gerenciador de inicializa√ß√£o segura minimalista que permite verificar assinaturas de outros bin√°rios UEFI em rela√ß√£o ao DB/DBX de inicializa√ß√£o segura ou verificar um banco de dados de assinaturas integrado.

O shim vem instalado automaticamente no Debian 12.

O [mokutil](https://packages.debian.org/bookworm/mokutil) fornece os meios para inscrever e apagar as chaves do propriet√°rio da m√°quina (machine owner keys - MOK) armazenadas no banco de dados do shim.

Com esses dois, vamos poder carregar a chave p√∫blica do DKMS para nosso sistema UEFI e assim quando o sistema inicializar ele conseguir√° validar os m√≥dulos assinados durante a constru√ß√£o no DKMS.

## A inscri√ß√£o da chave na BIOS UEFI

As chaves padr√µes do DKMS ficam nesse local: `/var/lib/dkms`

Como dito antes, ap√≥s instalado o DKMS ele n√£o vem com nenhuma chave, ela √© gerada durante a primeira execu√ß√£o. Por isso nesse caso dessa m√°quina tenho duas op√ß√µes. O m√≥dulo de kernel da Nvidia e o m√≥dulo de kernel da placa de rede. Instalando qualquer um dos dois, o DKMS j√° ir√° gerar as chaves.

Rodando um dos comandos abaixo, baixamos os arquivos e o sistema inicia a instala√ß√£o e constru√ß√£o usando DKMS:

- `apt install r8168-dkms` ou `apt install nvidia-driver nvidia-kernel-dkms`

Ap√≥s a instala√ß√£o de um dos m√≥dulos, podemos verificar as chaves geradas em `/var/lib/dkms`, onde teremos a chave p√∫blica `mok.pub` e a privada `mok.key`.

Tamb√©m j√° podemos verificar o m√≥dulo e sua assinatura rodando o comando `modinfo m√≥dulo`, no meu caso pode ser `modinfo r8168` ou `modinfo nvidia-current`.

Note que na descri√ß√£o teremos infora√ß√µes sobre a assinatura do m√≥dulo.

Antes de reiniciar o computador, teremos que realizar a inscri√ß√£o da chave p√∫blica em nosso sistema UEFI.

Para efetuar a inscri√ß√£o da chave no sistema UEFI, rodamos o seguinte comando:

- `mokutil --import /var/lib/dkms/mok.pub`

Ao realizar esse processo ser√° solicitado que se crie uma senha de entrada √∫nica que deve possuir ao menos 1 caractere.

**OBS:** Se o comando de importar a chave n√£o ocorrer com sucesso, provavelmente seu sistema n√£o permite carregar as chaves dessa forma, ent√£o voc√™ precisar√° realizar a c√≥pia da chave para um disco externo ou pendrive, por exemplo, e realizar a inscri√ß√£o da chave diretamente na BIOS da sua placa m√£e, carregando ela no gerenciador de chaves DB/DBX.

Ap√≥s isso reiniciamos a m√°quina para ent√£o realizarmos o enroll (inscri√ß√£o) da chave no sistema UEFI.

Ao reiniciar, ser√° apresentada a p√°gina para realizar a inscri√ß√£o, nessa primeira parte pode pressionar qualquer tecla.

![Shim UEFI Key Management](/assets/shim.png)

Ap√≥s, selecionamos a op√ß√£o **MOK Enroll**

![Enroll MOK](/assets/enrollmok.png)

A partir desse ponto, na p√°gina **Enroll MOK** selecione a op√ß√£o **Continue** e depois na tela **Enroll the Key(s)?** selecione a op√ß√£o **Yes**.

A pr√≥xima p√°gina ir√° solicitar a senha de uso √∫nico, digite a mesma que voc√™ criou quando inscreveu a chave e por fim selecione a op√ß√£o **Reboot**.

E est√° feito! :cheers:

Quando o sistema inicializar √© poss√≠vel verificar as chaves carregadas com o comando:

- `mokutil --list-enrolled`

Voc√™ ver√° a CA do debian e tamb√©m a chave do DKMS, al√©m de outras chaves existentes em seu sistema UEFI.

