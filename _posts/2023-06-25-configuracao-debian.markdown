---
layout: post
title:  "Configura√ß√µes p√≥s instala√ß√£o do Debian 12"
date:   2023-06-25 17:00:00 -0300
categories: debian
---

Nesse post, vou mostrar quais s√£o as configura√ß√µes que fa√ßo ap√≥s realizar a instala√ß√£o do debian.

# A m√°quina üñ•Ô∏è

Primeiro, √© importante ressaltar que essa instala√ß√£o ser√° feita em uma m√°quina com as seguintes configura√ß√µes:

- **CPU:** Ryzen 5 5600x
- **MB:** Asus TUF Gaming X570-PLUS/BR
  - *√Åudio:* ALC S1200A (ALC1200)
  - *LAN:* Realtek L8200A (RTL8111/8168/8411)
- **GPU:** RTX 3070
- **Wi-Fi/BT:** Intel Wi-Fi 6 (AX210/AX211/AX411) 160MHz

**OBS:** O SecureBoot est√° desativado para essa instala√ß√£o.

Dito isso √© importante lembrar que pode ser que algumas das configura√ß√µes n√£o se apliquem a qualquer instala√ß√£o do Debian, pois isso varia muito conforme o hardware onde o sistema foi instalado.

Quanto a instala√ß√£o do Debian, ela √© feita a partir de uma m√≠dia de instala√ß√£o do tipo [netinst](https://www.debian.org/CD/netinst/), ou seja, uma m√≠dia de instala√ß√£o m√≠nima que depende de uma conex√£o com a internet para baixar os pacotesdo sistema. Al√©m disso a instala√ß√£o √© feita de forma limpa, sem instalar nenhum tipo de pacote ou utilit√°rio adicional pelo **tasksel** que √© executado durante a instala√ß√£o.

Basicamente ao finalizar a instala√ß√£o eu tenho um sistema com **222** pacotes instalados.

Voc√™ pode visualizar a quantidade de pacotes instalados ao rodar o comando: `apt list ‚Äì-installed | wc -l` ou `sudo apt list ‚Äì-installed | wc -l` caso n√£o seja superusu√°rio.

# O pacote SUDO e o auto complete do BASH

Como primeiro passo eu instalo o pacote [sudo](https://wiki.debian.org/sudo) para conseguir executar comandos de superusu√°rio a partir do meu usu√°rio comum. Para isso preciso logar primeiro no usu√°rio _root_. Depois √© s√≥ executar os comandos:

1. `apt install sudo` - para instalar o pacote.
2. `adduser usu√°rio sudo` - para adicionar o usu√°rio ao grupo _sudo_, e assim ter acesso aos recursos. Onde "usu√°rio" √© o seu login.

Ap√≥s √© s√≥ deslogar de root com o comando _exit_

Agora podemos logar no usu√°rio comum, e assim j√° podemos testar o funcionamento do sudo instalando o pacote **bash-completion** que ajuda com op√ß√µes de auto completar usando tab.

`sudo apt install bash-completion`

Ser√° solicitada a senha do usu√°rio para finalizar a execu√ß√£o do comando.

Pronto! Agora come√ßamos com a configura√ß√£o dos reposit√≥rios.

# Espelhos

Antes de come√ßar qualquer tipo de instala√ß√£o √© necess√°rio configurar os espelhos dos reposit√≥rios, para que tenhamos uma conex√£o mais est√°vel e r√°pida.

Geralmente o espelho central (deb.debian.org) tem uma boa conex√£o, mas a fim de desafogar o tr√°fego para este servidor, √© prefer√≠vel que configuremos reposit√≥rios mais pr√≥ximos de nossa localiza√ß√£o.

Para ver a lista completa de espelhos de reposit√≥rios do debian, [acesse essa p√°gina](https://www.debian.org/mirror/list).

# A configura√ß√£o dos reposit√≥rios

Para configurar os reposit√≥rios no debian, vamos editar o arquivo **sources.list**, este por sua vez pode ser acessado em **/etc/apt/sources.list**

Para visualizar seu conte√∫do, podemos usar o comando `cat /etc/apt/sources.list`

Para edit√°-lo, devemos usar o comando sudo para ter privil√©gios de superusu√°rio e assim poder salvar o arquivo depois, sen√£o temos apenas o acesso a leitura.

Como editor de texto, eu gosto de utilizar o [nano](https://packages.debian.org/bookworm/nano). Ent√£o para editar o arquivo, usamos:

`sudo nano /etc/apt/sources.list`

A sintaxe para configura√ß√£o os reposit√≥rios basicamente √©:

    deb http://site.example.com/debian distribution component1 component2 component3
    deb-src http://site.example.com/debian distribution component1 component2 component3

Onde temos as seguintes se√ß√µes:

+ **Tipo de arquivo** - Aqui √© o in√≠cio da sintaxe, onde podemos ter **deb** para arquivos bin√°rios ou **deb-src** para o c√≥digo fonte.
+ **URL do espelho** - Aqui √© onde se informa a URL do espelho junto com seu protocolo.
+ **Distribui√ß√£o** - Nesse ponto √© onde especificamos qual √© a distrui√ß√£o que queremos utilizar ao pegar os pacotes ou c√≥digos no reposit√≥rio, no nosso caso o padr√£o vem como **bookworm**, onde esse √© o nome da distribui√ß√£o do debian 12. Os nomes das distribui√ß√µes do debian s√£o inspiradas no filme _Toy Story_.
+ **Componentes** - No final da configura√ß√£o, atribu√≠mos os componentes que vamos utilizar daquele reposit√≥rio, onde temos:
  + **main** - Sendo o componente principal da distribui√ß√£o, √© nele onde est√£o os kerneis linux, por exemplo. Consiste em pacotes [DFSG](https://www.debian.org/social_contract.pt.html)-compliant, que n√£o dependem de software fora desta √°rea para operar. Estes s√£o os √∫nicos pacotes considerados parte da distribui√ß√£o Debian.
  + **contrib** - Pacotes cont√™m software compat√≠vel com DFSG, mas t√™m depend√™ncias n√£o principais (possivelmente empacotado para Debian em non-free).
  + **non-free** - Cont√©m software que n√£o est√° em conformidade com o DFSG.
  + **non-free-firmware** - Cont√©m firmwares/drivers que n√£o est√£o em conformidade com o DFSG.

Nessa instala√ß√£o, vou utilizar a distribui√ß√£o **unstable** ou **sid** para obter os pacotes mais recentes que ainda est√£o em fase de testes. Voc√™ pode obter mais informa√ß√µes sobre essa distribui√ß√£o acessando [aqui](https://www.debian.org/releases/sid/).

A c√≥pia do meu **sources.list** pode ser obtida [aqui](/assets/sources.txt).

Recomendo utilizar todos os espelhos do Brasil, mas tamb√©m √© poss√≠vel utilizar apenas um deles, ai vai conforme sua necessidade. Tamb√©m √© importante testar qual deles √© mais r√°pido na sua regi√£o.

Voc√™ pode obter mais informa√ß√µes sobre a configura√ß√£o do sources.list [aqui](https://wiki.debian.org/pt_BR/SourcesList) e sobre as distribui√ß√µes [aqui](https://www.debian.org/releases/).

Ao editar o arquivo atrav√©s do nano, basta pressionar **Ctrl + O** para salvar e **Ctrl + X** para sair do modo de edi√ß√£o do arquivo.

Ap√≥s editar o arquivos, devemos atualizar o cache do APT usando o comando `sudo apt update` e ap√≥s a atualiza√ß√£o, podemos atualizar o sistema da distribui√ß√£o _bookworm_ para _sid_ usando o comando `sudo apt full-upgrade`

Ap√≥s finalizar a atualiza√ß√£o, temos o debian na distribui√ß√£o unstable ou sid.

# Firmwares

Por padr√£o, agora o debian inclui os firmwares na m√≠dia de instala√ß√£o, realizando a instala√ß√£o dos mesmos durante o processo de instala√ß√£o. Melhorando assim a compatibilidade do sistema com o hardware da m√°quina e facilitando a vida do usu√°rio. Por√©m isso vale a partir de agora na vers√£o 12 do debian, vers√µes anteriores √© necess√°rio realizar a instala√ß√£o dos firmwares manualmente ap√≥s a instala√ß√£o do sistema.

Entretanto para essa m√°quina o adaptador de rede LAN √© uma Realtek R8168, por√©m no firmware padr√£o contido no pacote *firmware-realtek* dos reposit√≥rios, n√£o oferece um suporte 100% para esse adaptador, fazendo com que tenhamos uma utiliza√ß√£o m√≠nima do adaptador, frente ao seu potencial.

Por este motivo, que irei realizar a instal√ß√£o de outro firmware, mantido pela comunidade e que utiliza o DKMS para recompilar o firmware a cada novo kernel instalado no sistema, isso garante que ele funcione mesmo ap√≥s a atualiza√ß√£o do kernel para um mais recente.

Para instalar esse novo firmware, ent√£o rodo o comando `apt install r8168-dkms`

Ele ir√° instalar v√°rios outros pacotes como depend√™ncia e ir√° desabilitar o m√≥dulo r8169 do firmware padr√£o do pacote *firmware-realtek* na pr√≥xima vez que reiniciarmos a m√°quina.

Para verificar os firmawares e m√≥dulos carregados na inicializa√ß√£o, podemos rodar o comando `dmesg` para ver o log da √∫ltima inicializa√ß√£o do sistema.
Para procurar por algo espec√≠fico, podemos complementar o comnado adicionando o comando `grep`, ficando dessa forma: `dmesg | grep r8169` para verificar o m√≥dulo carregado nesse momento. Ap√≥s reiniciarmos a m√°quina podemos pesquisar **r8168** no lugar de r8169.

Agora vamos realizar a instala√ß√£o do driver de v√≠deo da NVIDIA. No meu caso eu tenho uma RTX 3070 e ela j√° possui os m√≥dulos de kernel open source que a NVIDIA liberou para a comunidade, por√©m no meu caso vou continuar utilizando os drivers propriet√°rios.

Nesse caso a instala√ß√£o em um desktop √© muito simples, visto que eu s√≥ tenho essa fonte de v√≠deo no sistema (pois o 5600x nao possui v√≠deo integrado, por exemplo). Para quem tem um notebook com v√≠deo hibrido, essa configura√ß√£o geralmente nao se aplica, sendo necess√°rio verificar se h√° alguma alternativa e/ou solu√ß√£o.

Para a minha placa, basicamente √© s√≥ instalar o meta-pacote `nvidia-driver`, assim ele instalar√° todos os pacotes necess√°rios para o driver.

Da mesma forma como ocorre para o driver de rede, a instala√ß√£o padr√£o do debian instala os drivers open source da nouveau. Mas realizando a instala√ß√£o dos drivers da NVIDIA esse drivers s√£o colocados em uma lista negra para n√£o serem carregador com a incializa√ß√£o do sistema, deixando apenas os drivers propriet√°rios serem carregados.

Al√©m disso, os drivers da NVIDIA tamb√©m usam DKMS para compilar os m√≥dulos do kernel para cada kernel instalado no sistema e consequentemente para qualquer kernel novo a ser instalado.

# Microcode e CPU Frequency Scaling

Ao trabalhar com Linux, √© interessante instalarmos os microcodes para nosso processador, eles s√£o patchs de seguran√ßa e tamb√©m corre√ß√µes para que o funcionamento e o comportamento do processador sejam conforme as especifica√ß√µes do fabricante.

Ele atua como um "driver" do processador no kernel linux e deve ser carregado na inicializa√ß√£o do sistema.

No debian 12, o microcode tamb√©m j√° √© instalado por padr√£o durante a instala√ß√£o do sistema, assim como os demais drivers.

A √∫nica coisa que fica de fora √© o driver ACPI para controle de frequencia do processador. O debian ainda usa o legado acpi-cpufreq, mas tando a AMD como a Intel, possuem controladores pr√≥prios que aproveitam muito mais a performance e a eficiencia que o processador pode proporcionar.

No meu caso eu vou instalar o driver da AMD, o `amd-pstate` que √© uma m√≥dulo de kernel e tamb√©m precisa ser carregado na inicializa√ß√£o do sistema. Esse driver se aproveita do recursos AMD CPPC (Collaborative Processor Performance Control) dispon√≠vel nos processadores mais recentes da AMD, por√©m para habilitar ele no kernel √© importante que o recurso esteja habilitado na BIOS da placa m√£e.

Geralmente essas op√ß√µes ficam no autom√°tico, mas podem ser encontradas na BIOS em AMD CBS > NBIO > AMD CPPC

Para habilitar esse m√≥dulo do kernel na incializa√ß√£o o modo mais f√°cil √© indicarmos ele nos argumentos de inicializa√ß√£o do GRUB

Para isso vamos editar o arquivo `/etc/default/grub`

1. `nano /etc/default/grub`
2. Na op√ß√£o **GRUB_CMDLINE_LINUX_DEFAULT** adicionamos o comando `amd_pstate=active` no final para que ele seja carregado na inicializa√ß√£o do kernel.

Exemplo de como fica preenchido: GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_pstate=active"

Aproveitando que estamos editando o arquivo do GRUB, vamos rever algumas op√ß√µes

# GRUB

O grub √© nosso gerenciador de incializa√ß√£o padr√£o do debian. Existem outros sistemas de inicializa√ß√£o mas o GRUB √© o mais popular at√© ent√£o.

Al√©m da adi√ß√£o do m√≥dulo da amd-pstate, h√° outras duas configura√ß√µes que gosto de realizar.

descomentar a linha **GRUB_DISABLE_OS_PROBER=false**, para fazer com que o grub reconhe√ßa qualquer outro sistema instalado na m√°quina, e como eu utilizo um Windows 11 em outro SSD, ele ser√° reconhecido e uma ,inha de inicializa√ß√£o ser√° criada para ele ao atualizarmos o arquivo de configura√ß√£o posteriormente.

Al√©m dessa, tem tamb√©m a linha **GRUB_GFXMODE** onde podemos descoment√°-la e aplicar a resolu√ß√£o que quermos que a tela de inicializa√ß√£o do grub tenha. Note por√©m, que essa resolu√ß√£o nem sempre √© a mesma que vamos utilizar nativamente no monitor, isso depende do driver VBE da placa de v√≠deo.

No meu caso o driver tem suporte a resolu√ß√£o 4k, por√©m eu uso a resolu√ß√£o Full HD no grub, para as informa√ß√µes n√£o ficarem t√£o pequenas kkkk.

Para isso apenas configuro a linha como GRUB_GFXMODE=1920x1080

Ap√≥s essas edi√ß√µes, salvo o arquivo com Ctrl + O e depois fecho com Ctrl + X

Ent√£o para atualizar o arquivo de configura√ß√£o do grub, rodo o comando `update-grub`

E assim vemos a atualiza√ß√£o do arquivo ocorrendo.

Nesse ponto podemos reiniciar a m√°quina para ver os efeitos das configura√ß√£oes.

# Primeira reinicializa√ß√£o

Ap√≥s reinicar a m√°quina j√° podemos notar a primeira diferen√ßa, que √© a resolu√ß√£o do terminal, aqui temos o driver na NVIDIA em a√ß√£o.

Ao rodarmos os comando `dmesg | grep r8168` vemos o firmware da placa de rede carregado e configurado.

E ao rodar o comando  `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver` podemos ver que o driver do CPU frequency scalling carregado √© o **amd_pstate_epp**

Nesse ponto, temos o b√°sico configurado, ent√£o vamos partir para o ambiente desktop.

# GNOME

O meu ambiente desktop preferido √© de longe o gnome, acho ele muito limpo e f√°cil de usar. Al√©m de ser muito vers√°til e bonito.

Eu gosto de instalar o pacote `gnome-core` pois ele vem apenas com os pacotes essenciais, e conforme a demanda vou instalando o que necessito.

Para instalar, basicamente √© s√≥ rodar o comando `apt install gnome-core` e praticamente ser√° feito um download de ~500MB

Ap√≥s o download e a instala√ß√£o √© s√≥ reiniciar a m√°quina e a m√°gica acontece.

**OBS:** Se por acaso o icone de rede n√£o identificar sua rede cabeada, edite o arquivo `sudo nano /etc/NetworkManager/NetWorkManager.conf`

Na se√ß√£o [ifupdown] altere a op√ß√£o `managed` para `true`, salve e reinicie a m√°quina.